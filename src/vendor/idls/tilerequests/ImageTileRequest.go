// automatically generated by the FlatBuffers compiler, do not modify

package tilerequests

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageTileRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsImageTileRequest(buf []byte, offset flatbuffers.UOffsetT) *ImageTileRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageTileRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ImageTileRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageTileRequest) AcqId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileRequest) MutateAcqId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ImageTileRequest) Camera() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileRequest) MutateCamera(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ImageTileRequest) Frame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileRequest) MutateFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ImageTileRequest) Col() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileRequest) MutateCol(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ImageTileRequest) Row() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileRequest) MutateRow(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ImageTileRequest) Checksum(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ImageTileRequest) ChecksumLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ImageTileRequest) ChecksumBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageTileRequest) Image(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ImageTileRequest) ImageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ImageTileRequest) ImageBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ImageTileRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ImageTileRequestAddAcqId(builder *flatbuffers.Builder, acqId uint64) {
	builder.PrependUint64Slot(0, acqId, 0)
}
func ImageTileRequestAddCamera(builder *flatbuffers.Builder, camera int32) {
	builder.PrependInt32Slot(1, camera, 0)
}
func ImageTileRequestAddFrame(builder *flatbuffers.Builder, frame int32) {
	builder.PrependInt32Slot(2, frame, 0)
}
func ImageTileRequestAddCol(builder *flatbuffers.Builder, col int32) {
	builder.PrependInt32Slot(3, col, 0)
}
func ImageTileRequestAddRow(builder *flatbuffers.Builder, row int32) {
	builder.PrependInt32Slot(4, row, 0)
}
func ImageTileRequestAddChecksum(builder *flatbuffers.Builder, checksum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(checksum), 0)
}
func ImageTileRequestStartChecksumVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ImageTileRequestAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(image), 0)
}
func ImageTileRequestStartImageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ImageTileRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
