// automatically generated by the FlatBuffers compiler, do not modify

package tilerequests

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageTileResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsImageTileResponse(buf []byte, offset flatbuffers.UOffsetT) *ImageTileResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageTileResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ImageTileResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageTileResponse) AcqId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateAcqId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ImageTileResponse) TileId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateTileId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ImageTileResponse) Status() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateStatus(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *ImageTileResponse) SystemStatus() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateSystemStatus(n int16) bool {
	return rcv._tab.MutateInt16Slot(10, n)
}

func (rcv *ImageTileResponse) TileQueueStatus() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateTileQueueStatus(n int16) bool {
	return rcv._tab.MutateInt16Slot(12, n)
}

func (rcv *ImageTileResponse) ContentQueueStatus() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageTileResponse) MutateContentQueueStatus(n int16) bool {
	return rcv._tab.MutateInt16Slot(14, n)
}

func ImageTileResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ImageTileResponseAddAcqId(builder *flatbuffers.Builder, acqId uint64) {
	builder.PrependUint64Slot(0, acqId, 0)
}
func ImageTileResponseAddTileId(builder *flatbuffers.Builder, tileId int64) {
	builder.PrependInt64Slot(1, tileId, 0)
}
func ImageTileResponseAddStatus(builder *flatbuffers.Builder, status int16) {
	builder.PrependInt16Slot(2, status, 0)
}
func ImageTileResponseAddSystemStatus(builder *flatbuffers.Builder, systemStatus int16) {
	builder.PrependInt16Slot(3, systemStatus, 0)
}
func ImageTileResponseAddTileQueueStatus(builder *flatbuffers.Builder, tileQueueStatus int16) {
	builder.PrependInt16Slot(4, tileQueueStatus, 0)
}
func ImageTileResponseAddContentQueueStatus(builder *flatbuffers.Builder, contentQueueStatus int16) {
	builder.PrependInt16Slot(5, contentQueueStatus, 0)
}
func ImageTileResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
